/*
 * Copyright 2020 Sander Verdonschot <sander.verdonschot at gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.mangara.puzzles.gui;

import com.github.mangara.puzzles.gui.logiquiz.LogiquizPanel;
import com.github.mangara.puzzles.gui.sudoku.SudokuPanel;
import com.github.mangara.puzzles.gui.nonogram.NonogramPanel;
import com.github.mangara.puzzles.data.logiquiz.Logiquiz;
import com.github.mangara.puzzles.data.nonogram.Nonogram;
import com.github.mangara.puzzles.data.Puzzle;
import com.github.mangara.puzzles.data.PuzzleType;
import com.github.mangara.puzzles.data.sudoku.Sudoku;
import java.awt.CardLayout;

public class CenterPuzzlePanel extends javax.swing.JPanel {

    private final CardLayout layout;
    private final LogiquizPanel logiquizPanel;
    private final NonogramPanel nonogramPanel;
    private final SudokuPanel sudokuPanel;
    private PuzzlePanel activePuzzlePanel;

    public CenterPuzzlePanel(java.awt.Frame frame) {
        initComponents();

        layout = (CardLayout) getLayout();

        nonogramPanel = new NonogramPanel(frame);
        logiquizPanel = new LogiquizPanel(frame);
        sudokuPanel = new SudokuPanel(frame);
        activePuzzlePanel = nonogramPanel;

        add(nonogramPanel, PuzzleType.NONOGRAM.name());
        add(logiquizPanel, PuzzleType.LOGIQUIZ.name());
        add(sudokuPanel, PuzzleType.SUDOKU.name());
        
        // TODO - testing
        int[][] digits = new int[9][9];
        digits[0][0] = 9;
        digits[8][8] = 8;
        digits[8][0] = 7;
        digits[0][8] = 6;
        setPuzzle(new Sudoku(digits));
    }

    void clear() {
        activePuzzlePanel.clear();
    }

    void setBuilding(boolean building) {
        PuzzlePanel.InteractionMode mode = building
                ? PuzzlePanel.InteractionMode.BUILDING
                : PuzzlePanel.InteractionMode.SOLVING;
        activePuzzlePanel.setMode(mode);
    }

    Puzzle getPuzzle() {
        return activePuzzlePanel.getPuzzle();
    }

    void setPuzzle(Puzzle puzzle) {
        switch (puzzle.getType()) {
            case NONOGRAM:
                nonogramPanel.setPuzzle((Nonogram) puzzle);
                activePuzzlePanel = nonogramPanel;
                break;
            case LOGIQUIZ:
                logiquizPanel.setPuzzle((Logiquiz) puzzle);
                activePuzzlePanel = logiquizPanel;
                break;
            case SUDOKU:
                sudokuPanel.setPuzzle((Sudoku) puzzle);
                activePuzzlePanel = sudokuPanel;
                break;
            default:
                throw new IllegalArgumentException("Unknown puzzle type: " + puzzle.getType());
        }
        layout.show(this, puzzle.getType().name());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.CardLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
